# CLAUDE DOCKER SWARM DEPENDENCIES AND KEYS

## How This System Works
This MCP Swarm system creates AI agents that run as **MCP (Model Context Protocol) servers**.
Claude Desktop connects to these servers to access their specialized capabilities.

**Important**: This system works with **Claude Desktop**, not the Claude API.

## Required Software
- **Claude Desktop**: Download from https://claude.ai/download
- **Docker Engine 20.10+**: For running the agent containers
- **Docker Compose 2.0+**: For orchestrating services

## MCP Server Configuration
Each agent runs as an MCP server on specific ports:
- Architect: Port 3001 (project planning, architecture)
- Frontend: Port 3002 (UI/UX development)
- Backend: Port 3003 (API, database development)
- DevOps: Port 3004 (infrastructure, deployment)
- QA: Port 3005 (testing, quality assurance)
- Docs: Port 3006 (documentation, technical writing)

## Claude Desktop Setup
After starting the swarm, configure Claude Desktop to connect to the MCP servers:

**Option 1: Use the provided configuration**
Copy the contents of `config/claude-desktop-config.json` to your Claude Desktop MCP settings.

**Option 2: Manual configuration**
Add these MCP servers to your Claude Desktop configuration file:

```json
{
  "mcpServers": {
    "mcp-swarm-architect": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-stdio", "http://localhost:3001/mcp"],
      "description": "Lead Architect for project planning"
    },
    "mcp-swarm-frontend": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-stdio", "http://localhost:3002/mcp"],
      "description": "Frontend specialist for UI/UX"
    },
    "mcp-swarm-backend": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-stdio", "http://localhost:3003/mcp"],
      "description": "Backend specialist for APIs"
    },
    "mcp-swarm-devops": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-stdio", "http://localhost:3004/mcp"],
      "description": "DevOps specialist for infrastructure"
    },
    "mcp-swarm-qa": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-stdio", "http://localhost:3005/mcp"],
      "description": "QA specialist for testing"
    },
    "mcp-swarm-docs": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-stdio", "http://localhost:3006/mcp"],
      "description": "Documentation specialist"
    }
  }
}
```

## Local Infrastructure (Automatic)
These services run locally in Docker containers (no setup needed):
- **Neo4j Database**: localhost:7474 (browser), localhost:7687 (bolt)
- **Redis Cache**: localhost:6379
- **Dashboard**: localhost:8080 (React frontend), localhost:3000 (API backend)

## Optional External API Keys
These are for enhanced agent capabilities (not required for basic operation):

- **EXA_API_KEY**=your_exa_api_key_here
  * For web search capabilities in Architect and QA agents
  * Get from: https://exa.ai/

- **GOOGLE_CREDENTIALS_PATH**=/config/google-credentials.json
  * For Google Workspace integration in Architect and Docs agents
  * Get from: https://console.cloud.google.com/

- **UPSTASH_REDIS_REST_URL** and **UPSTASH_REDIS_REST_TOKEN**
  * Alternative cloud Redis for Frontend and Docs agents
  * **NOT NEEDED** if using local Redis container (which you are!)
  * Only useful for production deployments without local Redis
  * Get from: https://upstash.com/

- **BRIGHTDATA_API_KEY**=your_brightdata_key_here
  * For web scraping capabilities in DevOps agent
  * Get from: https://brightdata.com/

- **RAGIE_API_KEY**=your_ragie_key_here
  * For RAG (Retrieval Augmented Generation) in QA agent
  * Get from: https://ragie.ai/

- **COMET_API_KEY**=your_comet_key_here
  * For ML experiment tracking in DevOps agent
  * Get from: https://comet.ml/

- **MINDSDB_EMAIL** and **MINDSDB_PASSWORD**
  * For ML database integration in Backend agent
  * Get from: https://mindsdb.com/

### Database Credentials (Can keep defaults or change)

## System Requirements

### Docker Environment
- Docker Engine 20.10+
- Docker Compose 2.0+
- Minimum 8GB RAM
- Minimum 10GB disk space

### Network Ports Used
- 3000: Dashboard UI
- 3001-3006: Agent UI servers
- 7474: Neo4j Browser (optional)
- 7687: Neo4j Bolt
- 6379: Redis

## Docker Images Required
All handled automatically by docker-compose:
- node:18-alpine
- neo4j:5.12-community
- redis:7.2-alpine
- nginx:alpine (for dashboard)

## Node.js Dependencies
Installed automatically in containers:
- @modelcontextprotocol/server-memory
- @modelcontextprotocol/server-filesystem
- @modelcontextprotocol/server-fetch
- @modelcontextprotocol/server-brave-search
- @modelcontextprotocol/server-postgres
- @firebase/mcp-server
- express
- socket.io
- redis
- neo4j-driver
- winston
- anthropic

## Setup Checklist
1. ✅ Install Claude Desktop from https://claude.ai/download
2. ✅ Install Docker Engine and Docker Compose
3. ✅ Clone/download swarm files
4. ⚠️  Optionally add external API keys to .env file
5. ✅ Run: docker-compose up -d
6. ✅ Access React dashboard at http://localhost:8080
7. ✅ Configure Claude Desktop to connect to MCP servers (see above)
8. ✅ Start using agents through Claude Desktop interface

## Troubleshooting
- If agents fail to start: Check Docker containers are running
- If MCP servers don't connect: Ensure ports 3001-3006 are free
- If memory issues: Increase Docker memory limit to 8GB+
- For logs: docker-compose logs [service-name]
- For Claude Desktop connection issues: Check MCP server configuration

## Optional: Development Mode
For local development with hot reloading:
- Set NODE_ENV=development in .env
- Mount local code directories as volumes
- Use nodemon for file watching

## Security Notes
- Keep .env file secure and don't commit to version control
- Use strong passwords for production deployment
- Consider using Docker secrets for sensitive data
- Limit network exposure in production (use reverse proxy)
